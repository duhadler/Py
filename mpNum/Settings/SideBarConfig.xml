<SideBarConfig version="1.0">
  <SideBar activetab="${res:SharpDevelop.SideBar.ClipboardRing}">
    <SideTab clipboardring="true" text="${res:SharpDevelop.SideBar.ClipboardRing}">
      <SideTabItem text="Text:def LambertW(X):&#xD;" value="&#xD;&#xA;    def LambertW(X):&#xD;&#xA;        return (((((125 * X - 64) * X + 36) * X - 24) * X + 24) * X) / 24&#xD;&#xA;&#xD;&#xA;" />
      <SideTabItem text="Text:def cdisx_Lambert(LeftTail, RightTail, n):&#xD;" value="&#xD;&#xA;    def cdisx_Lambert(LeftTail, RightTail, n):&#xD;&#xA;        t = 0&#xD;&#xA;        d = 0&#xD;&#xA;        k = 0&#xD;&#xA;        a = 0&#xD;&#xA;        result = 0&#xD;&#xA;        a = 1 / (0.5 * n - 1)&#xD;&#xA;        k = Dist.LnGamma(0.5 * n)&#xD;&#xA;        d = a * (Math.Log(LeftTail) + k)&#xD;&#xA;        t = -a * Math.Exp(LeftTail + d)&#xD;&#xA;        #    Debug.Print &quot;a: &quot;, a, &quot;k: &quot;, k, &quot;d: &quot;, d, &quot;t: &quot;, t&#xD;&#xA;        result = -2 * DistX.LambertW(t) / a&#xD;&#xA;        return result&#xD;&#xA;" />
      <SideTabItem text="Text:def cdisx_Canal(LeftTail, RightTail, n):&#xD;" value="    def cdisx_Canal(LeftTail, RightTail, n):&#xD;&#xA;        h = 0&#xD;&#xA;        L = 0&#xD;&#xA;        mean = 0&#xD;&#xA;        stdev = 0&#xD;&#xA;        U = 0&#xD;&#xA;        m = 0&#xD;&#xA;        m2 = 0&#xD;&#xA;        m3 = 0&#xD;&#xA;        g = 0&#xD;&#xA;        z = 0&#xD;&#xA;        result = 0&#xD;&#xA;        z = DistX.ndisx(LeftTail, RightTail)&#xD;&#xA;        m = 1 / n&#xD;&#xA;        m2 = m * m&#xD;&#xA;        m3 = m2 * m&#xD;&#xA;        mean = (14580 - 1944 * m - 189 * m2 + 200 * m3) / 17496&#xD;&#xA;        stdev = Math.Sqrt(Math.Abs(648 * m + 72 * m2 - 37 * m3)) / 108&#xD;&#xA;        g = Math.Sqrt(0.5 * m3) / 162&#xD;&#xA;        z = z - g + (z * g) * (z - (2 * z * z - 5) * g)&#xD;&#xA;        L = 6 * (z * stdev + mean)&#xD;&#xA;        h = DistX.Cbrt(2 * (L + Math.Sqrt(13 + L * (L - 5))) - 5)&#xD;&#xA;        U = 0.5 + 0.5 * h - 1.5 / h&#xD;&#xA;        U = U * U * U&#xD;&#xA;        result = n * U * U&#xD;&#xA;        return result&#xD;&#xA;" />
      <SideTabItem text="Text:def cdisx_approx(LeftTail, RightTail, n):&#xD;" value="&#xD;&#xA;    def cdisx_approx(LeftTail, RightTail, n):&#xD;&#xA;        t = 0&#xD;&#xA;        d = 0&#xD;&#xA;        k = 0&#xD;&#xA;        a = 0&#xD;&#xA;        result = 0&#xD;&#xA;        UseLambert = False&#xD;&#xA;        h = 0&#xD;&#xA;        L = 0&#xD;&#xA;        mean = 0&#xD;&#xA;        stdev = 0&#xD;&#xA;        U = 0&#xD;&#xA;        m = 0&#xD;&#xA;        m2 = 0&#xD;&#xA;        m3 = 0&#xD;&#xA;        g = 0&#xD;&#xA;        z = 0&#xD;&#xA;        UseLambert = True&#xD;&#xA;        if UseLambert:&#xD;&#xA;            a = 1 / (0.5 * (n + 2) - 1)&#xD;&#xA;            k = Dist.LnGamma(0.5 * (n + 2))&#xD;&#xA;            d = a * (Math.Log(LeftTail) + k)&#xD;&#xA;            t = -a * Math.Exp(LeftTail + d)&#xD;&#xA;            DistX.print(&quot;t: &quot;, t)&#xD;&#xA;            if Math.Abs(t) &gt; 0.1:&#xD;&#xA;                UseLambert = False&#xD;&#xA;        if UseLambert:&#xD;&#xA;            DistX.print(&quot;Use Lambert&quot;)&#xD;&#xA;            result = -(((((125 * t - 64) * t + 36) * t - 24) * t + 24) * t) / (12 * a)&#xD;&#xA;        else:&#xD;&#xA;            DistX.print(&quot;Use Canal&quot;)&#xD;&#xA;            z = DistX.ndisx(LeftTail, RightTail)&#xD;&#xA;            m = 1 / n&#xD;&#xA;            m2 = m * m&#xD;&#xA;            m3 = m2 * m&#xD;&#xA;            mean = (14580 - 1944 * m - 189 * m2 + 200 * m3) / 17496&#xD;&#xA;            stdev = Math.Sqrt(Math.Abs(648 * m + 72 * m2 - 37 * m3)) / 108&#xD;&#xA;            g = Math.Sqrt(0.5 * m3) / 162&#xD;&#xA;            z = z - g + (z * g) * (z - (2 * z * z - 5) * g)&#xD;&#xA;            L = 6 * (z * stdev + mean)&#xD;&#xA;            h = DistX.Cbrt(2 * (L + Math.Sqrt(13 + L * (L - 5))) - 5)&#xD;&#xA;            U = 0.5 + 0.5 * h - 1.5 / h&#xD;&#xA;            U = U * U * U&#xD;&#xA;            result = n * U * U&#xD;&#xA;        return result&#xD;&#xA;" />
      <SideTabItem text="Text:def cdisx_new(LeftTail, RightTail, m):&#xD;" value="&#xD;&#xA;    def cdisx_new(LeftTail, RightTail, m):&#xD;&#xA;        Left1 = 0&#xD;&#xA;        Right1 = 0&#xD;&#xA;        deriv = 0&#xD;&#xA;        diff = 0&#xD;&#xA;        delta = 0&#xD;&#xA;        x1 = 0&#xD;&#xA;        if m &lt; 0.5:&#xD;&#xA;            DistX.print(&quot;m must be &gt;= 0.5&quot;)&#xD;&#xA;            return 1&#xD;&#xA;        MinRelError = 1E-13&#xD;&#xA;        RelError = 1.0&#xD;&#xA;        X = DistX.cdisx_approx(LeftTail, RightTail, m)&#xD;&#xA;        X = Math.Abs(X)&#xD;&#xA;        k = 0&#xD;&#xA;        UseLeftTail = False&#xD;&#xA;        if LeftTail &lt; RightTail:&#xD;&#xA;            UseLeftTail = True&#xD;&#xA;        while ((RelError &gt; MinRelError) &amp; (k &lt; 100)):&#xD;&#xA;            k = k + 1&#xD;&#xA;            Dist.cdis2(m, X, , , )&#xD;&#xA;            if UseLeftTail:&#xD;&#xA;                diff = LeftTail - Left1&#xD;&#xA;            else:&#xD;&#xA;                diff = Right1 - RightTail&#xD;&#xA;            delta = 0&#xD;&#xA;            if deriv != 0:&#xD;&#xA;                delta = diff / deriv&#xD;&#xA;            x1 = X + delta&#xD;&#xA;            if x1 &lt;= 0:&#xD;&#xA;                x1 = X / 2&#xD;&#xA;            X = x1&#xD;&#xA;            RelError = Math.Abs(delta) / X&#xD;&#xA;        return X&#xD;&#xA;" />
      <SideTabItem text="Text:def demoCdisx():&#xD;" value="&#xD;&#xA;    def demoCdisx():&#xD;&#xA;        m = 10.5&#xD;&#xA;        LeftTail = 1E-15&#xD;&#xA;        RightTail = 1 - LeftTail&#xD;&#xA;        #		double RightTail = 1E-220;&#xD;&#xA;        #		double LeftTail = 1 - RightTail;&#xD;&#xA;        R0 = DistX.cdisx_new(LeftTail, RightTail, m)&#xD;&#xA;        DistX.print(&quot;R0      : &quot;, R0)&#xD;&#xA;        r1 = DistX.cdisx_Lambert(LeftTail, RightTail, m + 2)&#xD;&#xA;        DistX.print(&quot;LambertL: &quot;, r1, &quot;, &quot;, Math.Abs(r1 - R0) / R0)&#xD;&#xA;        r2 = DistX.cdisx_Canal(LeftTail, RightTail, m)&#xD;&#xA;        DistX.print(&quot;Canal   : &quot;, r2, &quot;, &quot;, Math.Abs(r2 - R0) / R0)&#xD;&#xA;        DistX.print(&quot;&quot;)&#xD;&#xA;" />
      <SideTabItem text="Text:LeftTail, RightTail, density" value="LeftTail, RightTail, density" />
      <SideTabItem text="Text:demoCdisx" value="demoCdisx" />
      <SideTabItem text="Text:Main" value="Main" />
      <SideTabItem text="Text:def ndisx(LeftTailSoll, RightTailSoll):&#xD;" value="&#xD;&#xA;    def ndisx(LeftTailSoll, RightTailSoll):&#xD;&#xA;        temp = 0&#xD;&#xA;        if LeftTailSoll &lt; RightTailSoll:&#xD;&#xA;            temp = DistX.ndisx1(LeftTailSoll, RightTailSoll)&#xD;&#xA;        else:&#xD;&#xA;            temp = DistX.ndisx1(RightTailSoll, LeftTailSoll)&#xD;&#xA;        if LeftTailSoll &gt; RightTailSoll:&#xD;&#xA;            temp = -temp&#xD;&#xA;        return temp&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def ndisx1(LeftTailSoll, RightTailSoll):&#xD;&#xA;        split1 = 0.425&#xD;&#xA;        split2 = 5.0&#xD;&#xA;        const1 = 0.180625&#xD;&#xA;        const2 = 1.6&#xD;&#xA;        a0 = 3.38713287279637&#xD;&#xA;        A1 = 133.141667891784&#xD;&#xA;        A2 = 1971.59095030655&#xD;&#xA;        a3 = 13731.6937655095&#xD;&#xA;        a4 = 45921.9539315499&#xD;&#xA;        A5 = 67265.7709270087&#xD;&#xA;        a6 = 33430.5755835881&#xD;&#xA;        A7 = 2509.08092873012&#xD;&#xA;        b1 = 42.3133307016009&#xD;&#xA;        b2 = 687.187007492058&#xD;&#xA;        B3 = 5394.19602142475&#xD;&#xA;        b4 = 21213.7943015866&#xD;&#xA;        B5 = 39307.8958000927&#xD;&#xA;        B6 = 28729.0857357219&#xD;&#xA;        B7 = 5226.49527885285&#xD;&#xA;        C0 = 1.42343711074968&#xD;&#xA;        C1 = 4.63033784615655&#xD;&#xA;        c2 = 5.76949722146069&#xD;&#xA;        c3 = 3.6478483247632&#xD;&#xA;        c4 = 1.27045825245237&#xD;&#xA;        c5 = 0.241780725177451&#xD;&#xA;        c6 = 0.0227238449892692&#xD;&#xA;        C7 = 0.000774545014278341&#xD;&#xA;        d1 = 2.05319162663776&#xD;&#xA;        d2 = 1.6763848301838&#xD;&#xA;        D3 = 0.6897673349851&#xD;&#xA;        D4 = 0.14810397642748&#xD;&#xA;        D5 = 0.0151986665636165&#xD;&#xA;        D6 = 0.000547593808499535&#xD;&#xA;        D7 = 1.05075007164442E-09&#xD;&#xA;        E0 = 6.6579046435011&#xD;&#xA;        e1 = 5.46378491116411&#xD;&#xA;        e2 = 1.78482653991729&#xD;&#xA;        E3 = 0.296560571828505&#xD;&#xA;        E4 = 0.0265321895265761&#xD;&#xA;        E5 = 0.00124266094738808&#xD;&#xA;        E6 = 2.71155556874349E-05&#xD;&#xA;        E7 = 2.01033439929229E-07&#xD;&#xA;        f1 = 0.599832206555888&#xD;&#xA;        f2 = 0.136929880922736&#xD;&#xA;        f3 = 0.0148753612908506&#xD;&#xA;        f4 = 0.000786869131145613&#xD;&#xA;        f5 = 1.84631831751005E-05&#xD;&#xA;        f6 = 1.42151175831645E-07&#xD;&#xA;        f7 = 2.04426310338994E-15&#xD;&#xA;        ppnd16 = 0&#xD;&#xA;        r = 0&#xD;&#xA;        p = 0&#xD;&#xA;        Q = 0&#xD;&#xA;        p = LeftTailSoll&#xD;&#xA;        Q = LeftTailSoll - 0.5&#xD;&#xA;        if (Math.Abs(Q) &lt;= split1):&#xD;&#xA;            r = const1 - Q * Q&#xD;&#xA;            ppnd16 = Q * (((((((A7 * r + a6) * r + A5) * r + a4) * r + a3) * r + A2) * r + A1) * r + a0) / (((((((B7 * r + B6) * r + B5) * r + b4) * r + B3) * r + b2) * r + b1) * r + 1)&#xD;&#xA;            return ppnd16&#xD;&#xA;        else:&#xD;&#xA;            if (Q &lt; 0):&#xD;&#xA;                r = p&#xD;&#xA;            else:&#xD;&#xA;                r = 1 - p&#xD;&#xA;            if r &lt;= 0:&#xD;&#xA;                #{     ifault=1}&#xD;&#xA;                ppnd16 = 0&#xD;&#xA;                return ppnd16&#xD;&#xA;            r = Math.Sqrt(-Math.Log(r))&#xD;&#xA;            if (r &lt;= split2):&#xD;&#xA;                r = r - const2&#xD;&#xA;                ppnd16 = (((((((C7 * r + c6) * r + c5) * r + c4) * r + c3) * r + c2) * r + C1) * r + C0) / (((((((D7 * r + D6) * r + D5) * r + D4) * r + D3) * r + d2) * r + d1) * r + 1)&#xD;&#xA;            else:&#xD;&#xA;                r = r - split2&#xD;&#xA;                ppnd16 = (((((((E7 * r + E6) * r + E5) * r + E4) * r + E3) * r + e2) * r + e1) * r + E0) / (((((((f7 * r + f6) * r + f5) * r + f4) * r + f3) * r + f2) * r + f1) * r + 1)&#xD;&#xA;            if Q &lt; 0:&#xD;&#xA;                ppnd16 = -ppnd16&#xD;&#xA;            return ppnd16&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def LambertW(X):&#xD;&#xA;        return (((((125 * X - 64) * X + 36) * X - 24) * X + 24) * X) / 24&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def cdisx_Lambert(LeftTail, RightTail, n):&#xD;&#xA;        t = 0&#xD;&#xA;        d = 0&#xD;&#xA;        k = 0&#xD;&#xA;        a = 0&#xD;&#xA;        result = 0&#xD;&#xA;        a = 1 / (0.5 * n - 1)&#xD;&#xA;        k = Dist.LnGamma(0.5 * n)&#xD;&#xA;        d = a * (Math.Log(LeftTail) + k)&#xD;&#xA;        t = -a * Math.Exp(LeftTail + d)&#xD;&#xA;        #    Debug.Print &quot;a: &quot;, a, &quot;k: &quot;, k, &quot;d: &quot;, d, &quot;t: &quot;, t&#xD;&#xA;        result = -2 * DistX.LambertW(t) / a&#xD;&#xA;        return result&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def cdisx_Canal(LeftTail, RightTail, n):&#xD;&#xA;        h = 0&#xD;&#xA;        L = 0&#xD;&#xA;        mean = 0&#xD;&#xA;        stdev = 0&#xD;&#xA;        U = 0&#xD;&#xA;        m = 0&#xD;&#xA;        m2 = 0&#xD;&#xA;        m3 = 0&#xD;&#xA;        g = 0&#xD;&#xA;        z = 0&#xD;&#xA;        result = 0&#xD;&#xA;        z = DistX.ndisx(LeftTail, RightTail)&#xD;&#xA;        m = 1 / n&#xD;&#xA;        m2 = m * m&#xD;&#xA;        m3 = m2 * m&#xD;&#xA;        mean = (14580 - 1944 * m - 189 * m2 + 200 * m3) / 17496&#xD;&#xA;        stdev = Math.Sqrt(Math.Abs(648 * m + 72 * m2 - 37 * m3)) / 108&#xD;&#xA;        g = Math.Sqrt(0.5 * m3) / 162&#xD;&#xA;        z = z - g + (z * g) * (z - (2 * z * z - 5) * g)&#xD;&#xA;        L = 6 * (z * stdev + mean)&#xD;&#xA;        h = DistX.Cbrt(2 * (L + Math.Sqrt(13 + L * (L - 5))) - 5)&#xD;&#xA;        U = 0.5 + 0.5 * h - 1.5 / h&#xD;&#xA;        U = U * U * U&#xD;&#xA;        result = n * U * U&#xD;&#xA;        return result&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def cdisx_approx(LeftTail, RightTail, n):&#xD;&#xA;        t = 0&#xD;&#xA;        d = 0&#xD;&#xA;        k = 0&#xD;&#xA;        a = 0&#xD;&#xA;        result = 0&#xD;&#xA;        UseLambert = False&#xD;&#xA;        h = 0&#xD;&#xA;        L = 0&#xD;&#xA;        mean = 0&#xD;&#xA;        stdev = 0&#xD;&#xA;        U = 0&#xD;&#xA;        m = 0&#xD;&#xA;        m2 = 0&#xD;&#xA;        m3 = 0&#xD;&#xA;        g = 0&#xD;&#xA;        z = 0&#xD;&#xA;        UseLambert = True&#xD;&#xA;        if UseLambert:&#xD;&#xA;            a = 1 / (0.5 * (n + 2) - 1)&#xD;&#xA;            k = Dist.LnGamma(0.5 * (n + 2))&#xD;&#xA;            d = a * (Math.Log(LeftTail) + k)&#xD;&#xA;            t = -a * Math.Exp(LeftTail + d)&#xD;&#xA;            print(&quot;t: &quot;, t)&#xD;&#xA;            if Math.Abs(t) &gt; 0.1:&#xD;&#xA;                UseLambert = False&#xD;&#xA;        if UseLambert:&#xD;&#xA;            print(&quot;Use Lambert&quot;)&#xD;&#xA;            result = -(((((125 * t - 64) * t + 36) * t - 24) * t + 24) * t) / (12 * a)&#xD;&#xA;        else:&#xD;&#xA;            print(&quot;Use Canal&quot;)&#xD;&#xA;            z = ndisx(LeftTail, RightTail)&#xD;&#xA;            m = 1 / n&#xD;&#xA;            m2 = m * m&#xD;&#xA;            m3 = m2 * m&#xD;&#xA;            mean = (14580 - 1944 * m - 189 * m2 + 200 * m3) / 17496&#xD;&#xA;            stdev = Math.Sqrt(Math.Abs(648 * m + 72 * m2 - 37 * m3)) / 108&#xD;&#xA;            g = Math.Sqrt(0.5 * m3) / 162&#xD;&#xA;            z = z - g + (z * g) * (z - (2 * z * z - 5) * g)&#xD;&#xA;            L = 6 * (z * stdev + mean)&#xD;&#xA;            h = DistX.Cbrt(2 * (L + Math.Sqrt(13 + L * (L - 5))) - 5)&#xD;&#xA;            U = 0.5 + 0.5 * h - 1.5 / h&#xD;&#xA;            U = U * U * U&#xD;&#xA;            result = n * U * U&#xD;&#xA;        return result&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def cdisx_new(LeftTail, RightTail, m):&#xD;&#xA;        Left1 = 0&#xD;&#xA;        Right1 = 0&#xD;&#xA;        deriv = 0&#xD;&#xA;        diff = 0&#xD;&#xA;        delta = 0&#xD;&#xA;        x1 = 0&#xD;&#xA;        if m &lt; 0.5:&#xD;&#xA;            print(&quot;m must be &gt;= 0.5&quot;)&#xD;&#xA;            return 1&#xD;&#xA;        MinRelError = 1E-13&#xD;&#xA;        RelError = 1.0&#xD;&#xA;        X = DistX.cdisx_approx(LeftTail, RightTail, m)&#xD;&#xA;        X = Math.Abs(X)&#xD;&#xA;        k = 0&#xD;&#xA;        UseLeftTail = False&#xD;&#xA;        if LeftTail &lt; RightTail:&#xD;&#xA;            UseLeftTail = True&#xD;&#xA;        while ((RelError &gt; MinRelError) &amp; (k &lt; 100)):&#xD;&#xA;            k = k + 1&#xD;&#xA;            LeftTail, RightTail, density = cdis2(m, X)&#xD;&#xA;            if UseLeftTail:&#xD;&#xA;                diff = LeftTail - Left1&#xD;&#xA;            else:&#xD;&#xA;                diff = Right1 - RightTail&#xD;&#xA;            delta = 0&#xD;&#xA;            if deriv != 0:&#xD;&#xA;                delta = diff / deriv&#xD;&#xA;            x1 = X + delta&#xD;&#xA;            if x1 &lt;= 0:&#xD;&#xA;                x1 = X / 2&#xD;&#xA;            X = x1&#xD;&#xA;            RelError = Math.Abs(delta) / X&#xD;&#xA;        return X&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    def demoCdisx():&#xD;&#xA;        m = 10.5&#xD;&#xA;        LeftTail = 1E-15&#xD;&#xA;        RightTail = 1 - LeftTail&#xD;&#xA;        #		double RightTail = 1E-220;&#xD;&#xA;        #		double LeftTail = 1 - RightTail;&#xD;&#xA;        R0 = DistX.cdisx_new(LeftTail, RightTail, m)&#xD;&#xA;        print(&quot;R0      : &quot;, R0)&#xD;&#xA;        r1 = DistX.cdisx_Lambert(LeftTail, RightTail, m + 2)&#xD;&#xA;        print(&quot;LambertL: &quot;, r1, &quot;, &quot;, Math.Abs(r1 - R0) / R0)&#xD;&#xA;        r2 = DistX.cdisx_Canal(LeftTail, RightTail, m)&#xD;&#xA;        print(&quot;Canal   : &quot;, r2, &quot;, &quot;, Math.Abs(r2 - R0) / R0)&#xD;&#xA;        print(&quot;&quot;)&#xD;&#xA;&#xD;&#xA;" />
      <SideTabItem text="Text:Sub MakeRootPath()&#xD;" value="	&#xD;&#xA;	Sub MakeRootPath()&#xD;&#xA;		Dim regKey As RegistryKey&#xD;&#xA;		Dim regKey2 As RegistryKey&#xD;&#xA;		regKey = Registry.CurrentUser.OpenSubKey(&quot;SOFTWARE&quot;, True)&#xD;&#xA;		Try&#xD;&#xA;			regKey.DeleteSubKey(&quot;mpFormulaToolbox&quot;, True)&#xD;&#xA;		Catch ex As Exception&#xD;&#xA;'			Throw&#xD;&#xA;		End Try&#xD;&#xA;		regKey.CreateSubKey(&quot;mpFormulaToolbox&quot;)&#xD;&#xA;		Dim RootPath As String = My.Application.Info.DirectoryPath +&quot;\&quot;&#xD;&#xA;		regKey2 = Registry.CurrentUser.OpenSubKey(&quot;Software\mpFormulaToolbox&quot;, True)&#xD;&#xA;		regKey2.SetValue(&quot;RootPath&quot;, RootPath)&#xD;&#xA;		regKey.Close()&#xD;&#xA;	End Sub	&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;	Sub DeleteRootPath()&#xD;&#xA;		Dim regKey As RegistryKey&#xD;&#xA;		regKey = Registry.CurrentUser.OpenSubKey(&quot;SOFTWARE&quot;, True)&#xD;&#xA;		Try&#xD;&#xA;			regKey.DeleteSubKey(&quot;mpFormulaToolbox&quot;, True)&#xD;&#xA;		Catch ex As Exception&#xD;&#xA;'			Throw&#xD;&#xA;		End Try		&#xD;&#xA;		regKey.Close()&#xD;&#xA;	End Sub&#xD;&#xA;	&#xD;&#xA;	&#xD;&#xA;	Sub ReadRootPath()	&#xD;&#xA;		MsgBox(RootDir())&#xD;&#xA;	End Sub&#xD;&#xA;" />
      <SideTabItem text="Text:Function RootDir() As String&#xD;" value="	&#xD;&#xA;	&#xD;&#xA;	Function RootDir() As String&#xD;&#xA;		Dim regKey As RegistryKey&#xD;&#xA;		Dim RootPath As String = &quot;Not set&quot;&#xD;&#xA;		Try&#xD;&#xA;		  regKey = Registry.CurrentUser.OpenSubKey(&quot;SOFTWARE\mpFormulaToolbox&quot;, False)&#xD;&#xA;		  RootPath = regKey.GetValue(&quot;RootPath&quot;, &quot;Not set&quot;)&#xD;&#xA;		  regKey.Close()&#xD;&#xA;		Catch ex As Exception&#xD;&#xA;			MsgBox(&quot;RootDir not set&quot;)&#xD;&#xA;		End Try&#xD;&#xA;		Return RootPath&#xD;&#xA;	End Function&#xD;&#xA;&#xD;&#xA;" />
      <SideTabItem text="Text:Imports Microsoft.Win32" value="Imports Microsoft.Win32" />
      <SideTabItem text="Text:MsgBox(&quot;RootDir not set&quot;)" value="MsgBox(&quot;RootDir not set&quot;)" />
      <SideTabItem text="Text:Dim RootPath As String = My.Application.Info.Di..." value="Dim RootPath As String = My.Application.Info.DirectoryPath +&quot;\&quot;" />
      <SideTabItem text="Text:Dir" value="Dir" />
      <SideTabItem text="Text:ShowDir()" value="ShowDir()" />
      <SideTabItem text="Text:Function" value="Function" />
      <SideTabItem text="Text:DeleteRootPath" value="DeleteRootPath" />
      <SideTabItem text="Text:ReadRootPath" value="ReadRootPath" />
    </SideTab>
  </SideBar>
</SideBarConfig>